<?php

/**
 * @file
 * Primary module hooks for general module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\WebformSubmission;

/**
 * Implements hook_form_alter().
 */
function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($form_id === 'webform_submission_sample_request_add_form' || $form_id === 'webform_submission_sample_request_edit_form') {
    $webform = \Drupal::routeMatch()->getParameter('webform_submission');
    if ($webform) {
      $form['actions']['downloadPdf'] = [
        '#type' => 'link',
        '#title' => 'Download PDF',
        '#url' => Url::fromRoute('entity_print.view', ['export_type' => 'pdf', 'entity_type' => 'webform_submission', 'entity_id' => $webform->id()], ['query' => ['view_mode' => 'table']]),
        '#button_type' => 'primary',
        '#attributes' => [
          'class' => ['button'],
        ]
      ];
      $form['actions']['viewPdf'] = [
        '#type' => 'link',
        '#title' => 'View PDF',
        '#url' => Url::fromRoute('entity_print.view.debug', ['export_type' => 'pdf', 'entity_type' => 'webform_submission', 'entity_id' => $webform->id()], ['query' => ['view_mode' => 'table']]),
        '#button_type' => 'primary',
        '#attributes' => [
          'class' => ['button'],
        ]
      ];
    }
    $form['#attached']['library'][] = 'general/lab_form';
    $testing_companies = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'testing_company']);
    $testing_companies_map = [];
    foreach ($testing_companies as $testing_company) {
      $testing_companies_map[$testing_company->id()] = $testing_company->get('description')->value;
    }
    $requested_by_users = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'requested_by']);
    $requested_by_map = [];
    foreach ($requested_by_users as $user) {
      $requested_by_map[$user->id()] = $user->get('field_contacts')->value;
    }

    $customers = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'customer']);
    $tests = [];
    foreach ($customers as $customer) {
      $tests[$customer->id()] = array_map('trim', explode("\r\n",$customer->get('field_tests')->value));
    }
    $form['#attached']['drupalSettings']['testingCompanies'] = $testing_companies_map;
    $form['#attached']['drupalSettings']['requestedBy'] = $requested_by_map;
    $form['#attached']['drupalSettings']['tests'] = $tests;
    $form['#attached']['drupalSettings']['editForm'] = $form_id === 'webform_submission_sample_request_edit_form';

    if (!$form['#attached']['drupalSettings']['editForm']) {
      $form['elements']['container_edit']['#attributes']['hidden'] = TRUE;
    } else {
      $form['elements']['required_date_expiry']['#required'] = TRUE;
    }
    if ($route_name === 'entity.webform.canonical') {
      $form['elements']['additional_info']['#attributes']['hidden'] = TRUE;
    }
  }
  if ($form_id === 'views_exposed_form' && $route_name === 'view.submissions.page_1') {
    # change date fields to date field
    $form['webform_submission_value']['#type'] = 'date';
    # change size field to drop down
    $form['#attached']['library'][] = 'file/drupal.file';
  }
}

function _callback_form(&$form, FormStateInterface $form_state, $form_id) {
  // Prepare our textfield. check if the example select field has a selected option.
  $product_code = $form['elements']['flexbox']['container_right']['product_code']['#value'];
  $prf = $form['elements']['flexbox']['container_right']['prf_number']['#value'];
  // Return the prepared textfield.

  $logger = \Drupal::logger('prf_update');
  $host = '87364F3\SQL';
  $username = 'tahukas_viewer';
  $password = 'Ainult lugemisÃµigustega';

  $connectionInfoTrend = [
    "Database" => 'tahukas',
    "UID" => $username,
    "PWD" => $password,
  ];
  $dbc = sqlsrv_connect($host, $connectionInfoTrend) or $logger->error(print_r(sqlsrv_errors(), TRUE));
  if ($dbc !== FALSE) {
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['tog_weight']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['stitch_pattern']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['binding_colour']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['filling_fibres_and_']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['cover_fabric_tick_shell']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['edge_finishing']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label_code']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label']['#value'] = '';
    $stmt = sqlsrv_query($dbc, "SELECT pw.weight_name, product_code FROM prf_products pp
                                       LEFT JOIN prf_weights pw ON pp.prf_weights_ID = pw.ID
                                       WHERE pp.product_code = '$product_code'") or $logger->error(print_r(sqlsrv_errors(), TRUE));
    while ($row = sqlsrv_fetch_array($stmt, SQLSRV_FETCH_ASSOC)) {
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['tog_weight']['#value'] = $row['weight_name'];
    }
    $stmt_prf = sqlsrv_query($dbc, "SELECT TOP 1
                                      pr.top_stitching_pattern,
                                      pb.code 'binding',
                                      CONCAT(pr.fabric1, ' ', CAST(pf.code AS varchar)) 'fabric' ,
                                      pr.edge_finishing,
                                      CONCAT(
                                      CAST(pfn.fibre1_prcnt AS varchar) + '% ' + pfn.fibre1_code,
                                      ' / ' + CAST(pfn.fibre2_prcnt AS varchar) + '% ' + pfn.fibre2_code,
                                      ' / ' + CAST(pfn.fibre3_prcnt AS varchar) + '% ' + pfn.fibre3_code) 'filling',
                                      ISNULL(CAST(pcl.code AS varchar), ISNULL(CAST(pr.care_label_code_new1 AS varchar), null)) 'care_label'
                                    FROM prf_raw pr
                                      LEFT JOIN prf_fibre_names pfn ON pfn.ID=pr.fill_fibre
                                      LEFT JOIN prf_fabrics pf ON pr.fabric_code = pf.ID
                                      LEFT JOIN prf_care_labels pcl ON pr.care_label_code_existing1  = pcl.ID
                                      LEFT JOIN prf_bindings pb ON pr.binding_code = pb.ID
                                    WHERE pr.prf_ID = '$prf' AND pr.deleted = 0 AND pr.archived = 0
                                    ORDER BY pr.ID DESC") or $logger->error(print_r(sqlsrv_errors(), TRUE));
    while ($prf_row = sqlsrv_fetch_array($stmt_prf, SQLSRV_FETCH_ASSOC)) {
      $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['stitch_pattern']['#value'] = getTerm($prf_row['top_stitching_pattern'], 'stitch_pattern');
      $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['binding_colour']['#value'] = $prf_row['binding'];
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['filling_fibres_and_']['#value'] = $prf_row['filling'];
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['cover_fabric_tick_shell']['#value'] = $prf_row['fabric'];
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['edge_finishing']['#value'] = getTerm($prf_row['edge_finishing'], 'edge_finish');
      if (isset($prf_row['care_label']) && !empty($prf_row['care_label'])) {
        $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label_code']['#value'] = $prf_row['care_label'];
        $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label']['#value'] = getTerm('Yes', 'yes_no');
      }

    }
    sqlsrv_close($dbc);
  }
  return $form['elements']['sample_spec'];
}

function getTerm($name, $vocabulary) {
  if (empty($name)) return '';
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => $vocabulary, 'name' => $name]);
  $term = reset($term);
  if (empty($term)) {
    $term = Term::create([
      'vid' => $vocabulary,
      'name' => (string) $name,
    ]);
    $term->save();
  }
  return $term->id();
}

function get_last_order_number() {
  $query = \Drupal::entityTypeManager()->getStorage('webform_submission')->getQuery()->condition('webform_id', 'sample_request')->accessCheck(FALSE)->sort('sid', 'DESC');
  $result = $query->execute();
  $webform_submission = array_shift($result);
  if (empty($webform_submission)) {
    return 0;
  }
  $last_order = WebformSubmission::load($webform_submission);
  if (empty($last_order)) {
    return 0;
  }
  return $last_order->id();
}

function general_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  if ($view->storage->id() === 'submissions' && $field->field === 'operations') {
    $user = \Drupal::currentUser();
    if (!in_array('administrator', $user->getRoles())) {
      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
      $webform_submission = $variables['row']->_entity;
      $edit_link = $webform_submission->toUrl('edit-form')->toString();
      $markup = '<div class="dropbutton-wrapper"><div class="dropbutton-widget"><ul class="dropbutton dropbutton--extrasmall dropbutton--gin"><li class="edit dropbutton__item"><a href="' . $edit_link . '">Edit</a></li></ul>';
      $variables['output'] = [
        '#markup' => $markup,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function general_webform_submission_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  $data = $entity->getData();
  $data['order_number'] = $entity->id();
  $entity->setData($data);
  $entity->save();
}

/**
 * Implements hook_mail().
 */
function general_mail($key, &$message, $params) {
  if ($key === 'user_notification') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF8;';
  }
}
