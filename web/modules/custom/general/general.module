<?php

/**
 * @file
 * Primary module hooks for general module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\WebformSubmission;

/**
 * Implements hook_form_alter().
 */
function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($form_id === 'webform_submission_sample_request_add_form' || $form_id === 'webform_submission_sample_request_edit_form') {
    $webform = \Drupal::routeMatch()->getParameter('webform_submission');
    if ($webform) {
      $form['actions']['downloadPdf'] = [
        '#type' => 'link',
        '#title' => 'Download PDF',
        '#url' => Url::fromRoute('entity_print.view.debug', ['export_type' => 'pdf', 'entity_type' => 'webform_submission', 'entity_id' => $webform->id()], ['query' => ['view_mode' => 'table']]),
        '#button_type' => 'primary',
        '#attributes' => [
          'class' => ['button'],
          '_target' => '_blank',
        ]
      ];
    }
    $form['#attached']['library'][] = 'general/lab_form';
    $testing_companies = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'testing_company']);
    $testing_companies_map = [];
    foreach ($testing_companies as $testing_company) {
      $testing_companies_map[$testing_company->id()] = $testing_company->get('description')->value;
    }
    $requested_by_users = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'requested_by']);
    $requested_by_map = [];
    foreach ($requested_by_users as $user) {
      $requested_by_map[$user->id()] = $user->get('field_contacts')->value;
    }

    $customers = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'customer']);
    $tests = [];
    foreach ($customers as $customer) {
      $tests[$customer->id()] = array_map('trim', explode("\r\n",$customer->get('field_tests')->value));
    }
    $form['#attached']['drupalSettings']['testingCompanies'] = $testing_companies_map;
    $form['#attached']['drupalSettings']['requestedBy'] = $requested_by_map;
    $form['#attached']['drupalSettings']['tests'] = $tests;
    $form['#attached']['drupalSettings']['editForm'] = $form_id === 'webform_submission_sample_request_edit_form';

    if (!$form['#attached']['drupalSettings']['editForm']) {
      $form['elements']['container_edit']['#attributes']['hidden'] = TRUE;
    } else {
      $form['elements']['required_date_expiry']['#required'] = TRUE;
    }
    if ($route_name === 'entity.webform.canonical') {
      $form['elements']['additional_info']['#attributes']['hidden'] = TRUE;
    }
  }
  if ($form_id === 'views_exposed_form' && $route_name === 'view.submissions.page_1') {
    # change date fields to date field
    $form['webform_submission_value']['#type'] = 'date';
    # change size field to drop down
    $form['#attached']['library'][] = 'file/drupal.file';
  }
}


function getTerm($name, $vocabulary) {
  if (empty($name)) return '';
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => $vocabulary, 'name' => $name]);
  $term = reset($term);
  if (empty($term)) {
    $term = Term::create([
      'vid' => $vocabulary,
      'name' => (string) $name,
    ]);
    $term->save();
  }
  return $term->id();
}

function get_last_order_number() {
  $query = \Drupal::entityTypeManager()->getStorage('webform_submission')->getQuery()->condition('webform_id', 'sample_request')->accessCheck(FALSE)->sort('sid', 'DESC');
  $result = $query->execute();
  $webform_submission = array_shift($result);
  if (empty($webform_submission)) {
    return 0;
  }
  $last_order = WebformSubmission::load($webform_submission);
  if (empty($last_order)) {
    return 0;
  }
  return $last_order->id();
}

function general_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  if ($view->storage->id() === 'submissions' && $field->field === 'operations') {
    $user = \Drupal::currentUser();
    if (!in_array('administrator', $user->getRoles())) {
      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
      $webform_submission = $variables['row']->_entity;
      $edit_link = $webform_submission->toUrl('edit-form')->toString();
      $markup = '<div class="dropbutton-wrapper"><div class="dropbutton-widget"><ul class="dropbutton dropbutton--extrasmall dropbutton--gin"><li class="edit dropbutton__item"><a href="' . $edit_link . '">Edit</a></li></ul>';
      $variables['output'] = [
        '#markup' => $markup,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function general_webform_submission_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  $data = $entity->getData();
  $data['order_number'] = $entity->id();
  $entity->setData($data);
  $entity->save();
}

/**
 * Implements hook_cron().
 */
function general_cron() {
  $site_settings = \Drupal::config('system.site');
  $submissions = \Drupal::entityTypeManager()->getStorage('webform_submission')->loadByProperties(['webform_id' => 'sample_request']);
  $expiring_today = [];
  $expiring_30_days = [];
  $expiring_45_days = [];
  /** @var \Drupal\webform\WebformSubmissionInterface $submission */
  foreach ($submissions as $submission) {
    $data = $submission->getData();
    if ($data['required_date_expiry'] && $data['test_report_date']) {
      $current_date = DrupalDateTime::createFromTimestamp(time())
      ->setTimezone(new DateTimeZone(\Drupal::config('system.date')
        ->get('timezone.default')));
      $today = $current_date->format('Y-m-d');
      $days_30 = (clone $current_date)->modify('+30 days')->format('Y-m-d');
      $days_45 = (clone $current_date)->modify('+45 days')->format('Y-m-d');
      $expiry_date = DrupalDateTime::createFromFormat('Y-m-d', $data['test_report_date'])->modify('+'.$data['required_date_expiry'])->format('Y-m-d');
      if ($today === $expiry_date) {
        $expiring_today[] = build_expiry_message($data, $expiry_date);
      } elseif ($days_30 === $expiry_date) {
        $expiring_30_days[] = build_expiry_message($data, $expiry_date);
      } elseif ($days_45 === $expiry_date) {
        $expiring_45_days[] = build_expiry_message($data, $expiry_date);
      }
    }
  }
  if ($expiring_today || $expiring_30_days || $expiring_45_days) {
    \Drupal::service('plugin.manager.mail')->mail('general', 'user_notification', $site_settings->get('mail'), 'en', ['body' => build_expiry_mail_body($expiring_today, $expiring_30_days, $expiring_45_days), 'subject' => "Test index expiration dates"]);
  }
}

function build_expiry_message($data, $expiry_date) {
  return $data['order_number'] . ' - ' . $data['description']. ' - '. $expiry_date;
}

function build_expiry_mail_body($expiring_today, $expiring_30_days, $expiring_45_days) {
  $message = 'Please find below the summary of tests about to expire: <br />';
  if ($expiring_today) {
    $message .= '<br />Test expiring today: <br />' . implode('<br />', $expiring_today) . '<br />';
  }
  if ($expiring_30_days) {
    $message .= '<br />Test expiring in 30 days from today: <br />' . implode('<br />', $expiring_30_days) . '<br />';
  }
  if ($expiring_45_days) {
    $message .= '<br />Test expiring in 45 days from today: <br />' . implode('<br />', $expiring_45_days);
  }
  return $message;
}
/**
 * Implements hook_mail().
 */
function general_mail($key, &$message, $params) {
  if ($key === 'user_notification') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF8;';
  }
}
