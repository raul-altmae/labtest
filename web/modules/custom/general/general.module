<?php

/**
 * @file
 * Primary module hooks for general module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\webform\Entity\WebformSubmission;

/**
 * Implements hook_form_alter().
 */
function general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($form_id === 'webform_submission_sample_request_add_form') {
    $form['elements']['flexbox']['container_left']['order_number']['#attributes']['hidden'] = TRUE;
    $form['elements']['flexbox']['container_left']['order_number']["#title_display"] = 'invisible';
    $form['elements']['#prefix'] = '<div id="prefill-sample-request">';
    $form['elements']['#suffix'] = '</div>';
    if ($route_name === 'entity.webform.canonical') {
      $form['elements']['additional_info']['#attributes']['hidden'] = TRUE;

      $form['order_id'] = [
        '#type' => 'entity_autocomplete',
        '#title' => t('Order number'),
        '#target_type' => 'webform_submission',
        '#selection_handler' => 'views',
        '#selection_settings' => [
          'view' => [
            'view_name' => 'prefill',
            'display_name' => 'entity_reference_1',
            'arguments' => [],
          ],
        ],
        '#weight' => -1,
      ];
      $form['prefill'] = [
        '#type' => 'button',
        '#value' => t('Prefill'),
        '#weight' => -1,
        '#limit_validation_errors' => [],
        '#ajax' => [
          'callback' => '_prefill_callback',
          'disable-refocus' => FALSE,
          'event' => 'click',
          'wrapper' => 'prefill-sample-request',
          'progress' => [
            'type' => 'throbber',
            'message' => 'Loading...',
          ],
        ],
      ];
    }
    $form['elements']['sample_spec']['#prefix'] = '<div id="edit-spec-output">';
    $form['elements']['sample_spec']['#suffix'] = '</div>';
    $form['elements']['sample_spec']['load'] = [
      '#type' => 'button',
      '#value' => t('Import from PRF'),
      '#weight' => -1,
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => '_callback_form', // don't forget :: when calling a class method.
        //'callback' => [$this, 'myAjaxCallback'], //alternative notation
        'disable-refocus' => FALSE, // Or TRUE to prevent re-focusing on the triggering element.
        'event' => 'click',
        'wrapper' => 'edit-spec-output',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Loading...',
        ],// This element is updated with this AJAX callback.
      ],
    ];
  }
  if ($form_id === 'views_exposed_form' && $route_name === 'view.submissions.page_1') {
    $size_options = [
      '' => t('- Any -'),
    ];
    $size_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'size']);
    foreach ($size_terms as $size) {
      $size_options[$size->id()] = $size->getName();
    }

    # change date fields to date field
    $form['webform_submission_value']['#type'] = 'date';
    $form['webform_submission_value_2']['#type'] = 'date';
    $form['webform_submission_value_13']['#type'] = 'date';
    $form['webform_submission_value_17']['#type'] = 'date';
    # change size field to drop down
    $form['webform_submission_value_6'] = [
      '#type' => 'select',
      '#options' => $size_options,
      '#default_value' => "",
      '#size' => NULL,
      '#required' => FALSE,
    ];
    $form['#attached']['library'][] = 'file/drupal.file';
  }
}

function _prefill_callback(&$form, FormStateInterface $form_state, $form_id) {
  // Prepare our textfield. check if the example select field has a selected option.
  $order_id = $form['order_id']['#value'];
  $order = WebformSubmission::load($order_id);
  if (empty($order)) {
    $order_id = explode(':', explode('-', $form['order_id']['#value'])[0])[1];
    $order = WebformSubmission::load($order_id);
    if (empty($order)) {
      return $form['elements'];
    }
  }
  $order_data = $order->getData();
  foreach ($form['elements'] as $flex_id => $flexbox) {
    if ($flex_id === 'flexbox') {
      foreach ($flexbox as $container_id => $container) {
        if (!is_array($container)) continue;
        foreach ($container as $field_name => $field) {
          if (is_array($container) && isset($field['#webform_key']) && isset($order_data[$field['#webform_key']])) {
            $form['elements'][$flex_id][$container_id][$field_name]['#value'] = $order_data[$field['#webform_key']];
          }
        }
      }
    } elseif (in_array($flex_id, ['sample_spec', 'packaging_shipping'])) {
      foreach ($flexbox as $child_flexbox_id => $child_flexbox) {
        if (isset($child_flexbox['#type']) && $child_flexbox['#type'] === 'webform_flexbox') {
          foreach ($child_flexbox as $container_id => $container) {
            if (!is_array($container)) continue;
            foreach ($container as $field_name => $field) {
              if (is_array($field) && isset($field['#webform_key']) && isset($order_data[$field['#webform_key']]) && !empty($order_data[$field['#webform_key']])) {
                $form['elements'][$flex_id][$child_flexbox_id][$container_id][$field_name]['#value'] = $order_data[$field['#webform_key']];
                if ($field_name === 'size_autocomplete') {
                  $form['elements'][$flex_id][$child_flexbox_id][$container_id][$field_name]['#value'] = '';
                  $term = Term::load($order_data[$field['#webform_key']]);
                  if (!empty($term)) {
                    $form['elements'][$flex_id][$child_flexbox_id][$container_id][$field_name]['#value'] = $term->getName();
                  }
                }
              }
            }
          }
        }
      }
    } elseif ($flex_id === 'additional_comments') {
      if (is_array($flexbox) && isset($flexbox['#webform_key']) && isset($order_data[$flexbox['#webform_key']]) && !empty($order_data[$flexbox['#webform_key']])) {
        $form['elements'][$flex_id]['#value'] = $order_data[$flexbox['#webform_key']];
      }
    }
  }
  return $form['elements'];
}

function _callback_form(&$form, FormStateInterface $form_state, $form_id) {
  // Prepare our textfield. check if the example select field has a selected option.
  $product_code = $form['elements']['flexbox']['container_right']['product_code']['#value'];
  $prf = $form['elements']['flexbox']['container_right']['prf_number']['#value'];
  // Return the prepared textfield.

  $logger = \Drupal::logger('prf_update');
  $host = 'WIN-UJRRM9G04P6\SQL';
  $username = 'tahukas_viewer';
  $password = 'Ainult lugemisÃµigustega';

  $connectionInfoTrend = [
    "Database" => 'tahukas',
    "UID" => $username,
    "PWD" => $password,
  ];
  $dbc = sqlsrv_connect($host, $connectionInfoTrend) or $logger->error(print_r(sqlsrv_errors(), TRUE));
  if ($dbc !== FALSE) {
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['tog_weight']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['stitch_pattern']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['binding_colour']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['filling_fibres_and_']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['cover_fabric_tick_shell']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['edge_finishing']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label_code']['#value'] = '';
    $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label']['#value'] = '';
    $stmt = sqlsrv_query($dbc, "SELECT pw.weight_name, product_code FROM prf_products pp
                                       LEFT JOIN prf_weights pw ON pp.prf_weights_ID = pw.ID
                                       WHERE pp.product_code = '$product_code'") or $logger->error(print_r(sqlsrv_errors(), TRUE));
    while ($row = sqlsrv_fetch_array($stmt, SQLSRV_FETCH_ASSOC)) {
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['tog_weight']['#value'] = $row['weight_name'];
    }
    $stmt_prf = sqlsrv_query($dbc, "SELECT TOP 1
                                      pr.top_stitching_pattern,
                                      pb.code 'binding',
                                      CONCAT(pr.fabric1, ' ', CAST(pf.code AS varchar)) 'fabric' ,
                                      pr.edge_finishing,
                                      CONCAT(
                                      CAST(pfn.fibre1_prcnt AS varchar) + '% ' + pfn.fibre1_code,
                                      ' / ' + CAST(pfn.fibre2_prcnt AS varchar) + '% ' + pfn.fibre2_code,
                                      ' / ' + CAST(pfn.fibre3_prcnt AS varchar) + '% ' + pfn.fibre3_code) 'filling',
                                      ISNULL(CAST(pcl.code AS varchar), ISNULL(CAST(pr.care_label_code_new1 AS varchar), null)) 'care_label'
                                    FROM prf_raw pr
                                      LEFT JOIN prf_fibre_names pfn ON pfn.ID=pr.fill_fibre
                                      LEFT JOIN prf_fabrics pf ON pr.fabric_code = pf.ID
                                      LEFT JOIN prf_care_labels pcl ON pr.care_label_code_existing1  = pcl.ID
                                      LEFT JOIN prf_bindings pb ON pr.binding_code = pb.ID
                                    WHERE pr.prf_ID = '$prf' AND pr.deleted = 0 AND pr.archived = 0
                                    ORDER BY pr.ID DESC") or $logger->error(print_r(sqlsrv_errors(), TRUE));
    while ($prf_row = sqlsrv_fetch_array($stmt_prf, SQLSRV_FETCH_ASSOC)) {
      $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['stitch_pattern']['#value'] = getTerm($prf_row['top_stitching_pattern'], 'stitch_pattern');
      $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['binding_colour']['#value'] = $prf_row['binding'];
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['filling_fibres_and_']['#value'] = $prf_row['filling'];
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['cover_fabric_tick_shell']['#value'] = $prf_row['fabric'];
      $form['elements']['sample_spec']['flexbox_sample']['container_left_sample']['edge_finishing']['#value'] = getTerm($prf_row['edge_finishing'], 'edge_finish');
      if (isset($prf_row['care_label']) && !empty($prf_row['care_label'])) {
        $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label_code']['#value'] = $prf_row['care_label'];
        $form['elements']['sample_spec']['flexbox_sample']['container_right_sample']['care_label']['#value'] = getTerm('Yes', 'yes_no');
      }

    }
    sqlsrv_close($dbc);
  }
  return $form['elements']['sample_spec'];
}

function getTerm($name, $vocabulary) {
  if (empty($name)) return '';
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => $vocabulary, 'name' => $name]);
  $term = reset($term);
  if (empty($term)) {
    $term = Term::create([
      'vid' => $vocabulary,
      'name' => (string) $name,
    ]);
    $term->save();
  }
  return $term->id();
}

function get_last_order_number() {
  $query = \Drupal::entityTypeManager()->getStorage('webform_submission')->getQuery()->condition('webform_id', 'sample_request')->accessCheck(FALSE)->sort('sid', 'DESC');
  $result = $query->execute();
  $webform_submission = array_shift($result);
  if (empty($webform_submission)) {
    return 0;
  }
  $last_order = WebformSubmission::load($webform_submission);
  if (empty($last_order)) {
    return 0;
  }
  return $last_order->id();
}

function general_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  if ($view->storage->id() === 'submissions' && $field->field === 'operations') {
    $user = \Drupal::currentUser();
    if (!in_array('administrator', $user->getRoles())) {
      /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
      $webform_submission = $variables['row']->_entity;
      $edit_link = $webform_submission->toUrl('edit-form')->toString();
      $markup = '<div class="dropbutton-wrapper"><div class="dropbutton-widget"><ul class="dropbutton dropbutton--extrasmall dropbutton--gin"><li class="edit dropbutton__item"><a href="' . $edit_link . '">Edit</a></li></ul>';
      $variables['output'] = [
        '#markup' => $markup,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function general_webform_submission_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  $data = $entity->getData();
  $data['order_number'] = $entity->id();
  $entity->setData($data);
  $entity->save();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function general_webform_submission_presave(EntityInterface $entity) {
  $original_data = $entity->getOriginalData();
  $site_settings = \Drupal::config('system.site');
  $entity_type = 'webform_submission';
  $view_mode = 'table';
  $webform_submission = $entity;
  $new_data = $entity->getData();
  if (!empty($original_data)) {
    /** @var WebformSubmission $webform_submission */
    $order_number = $new_data['order_number'];
    $changes_map = [];
    foreach ($original_data as $field => $value) {
      if (isset($new_data[$field]) && $new_data[$field] !== $value) {
        $changes_map[$field] = $new_data[$field];
      }
    }
    if (empty($changes_map)) {
      return;
    }
    $changes_map['order_number'] = $order_number;
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type);
    $build = $view_builder->view($webform_submission, $view_mode);
    $build['submission'] = $build;
    render($build);
    $data = $build['data'];
    foreach ($data['#rows'] as $key => $row) {
      if (array_key_exists($key, $changes_map)) {
        if (in_array($key, ['current_status', 'accuracy_to_spec', 'factory', 'fx_rate', 'courier_cost_usd', 'shipping_date', 'tracking', 'carrier_cost_usd', 'total_cost_of_order', 'china', 'comments'])) {
          $data['#rows'][$key.'_changed'] = $row;
          unset($data['#rows'][$key]);
        }
      } elseif (!in_array($key, ['customer', 'product_ref'])) {
        unset($data['#rows'][$key]);
      }
    }
    if (!empty($data['#rows'])) {
      $body = render($data);
      $replacedBody = str_replace('_sid_', $entity->id(), $body);
      \Drupal::service('plugin.manager.mail')->mail('general', 'user_notification', $site_settings->get('mail'), 'en', ['body' => trim($replacedBody), 'subject' => "Sample request $order_number has been changed"]);
    }
  } else if ($new_data['order_number'] === $entity->id()) {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity_type);
    $build = $view_builder->view($webform_submission, $view_mode);
    $body = render($build);
    \Drupal::service('plugin.manager.mail')->mail('general', 'user_notification', $site_settings->get('mail'), 'en', ['body' => trim($body), 'subject' => "Sample request"]);
  }
}

/**
 * Implements hook_mail().
 */
function general_mail($key, &$message, $params) {
  if ($key === 'user_notification') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF8;';
  }
}
