<?php

use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess().
 */
function wetheme_preprocess(&$variables, $hook) {
  // Get base path in twig
  $variables['base_path'] = base_path();
  $variables['logged_id'] = FALSE;

  // Twig boolean to check if language module is enabled
  if (\Drupal::moduleHandler()->moduleExists('language')) {
    $variables['multilang'] = TRUE;
  } else {
    $variables['multilang'] = FALSE;
  }
  if (!\Drupal::currentUser()->isAnonymous()) {
    $variables['logged_id'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function wetheme_preprocess_HOOK(&$variables) {
  // Add class to block based on block type
  if (isset($variables['elements']['content']['#block_content'])) {
    $variables['attributes']['class'][] = 'block--' . $variables['elements']['content']['#block_content']->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wetheme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add theme suggestion based on block type
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function wetheme_theme_suggestions_table_alter(array &$suggestions, array $variables, $hook) {
  if ($variables['attributes']['class'][0] === 'webform-submission-table') {
    $suggestions[] = $hook . '__' . 'webform_submission_table';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function wetheme_preprocess_table__webform_submission_table(&$variables) {
  $webform_submission = null;
  $webform_submission_id = \Drupal::routeMatch()->getParameter('entity_id');
  if ($webform_submission_id) {
    $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load($webform_submission_id);
  }

  $requested_by_users = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'requested_by']);
  $requested_by_map = [];
  $variables['rows']['component_1'] = create_row('Components', create_component(1, $variables). '<br/>'. create_component(2, $variables). '<br/>'. create_component(3, $variables). '<br/>'. create_component(4, $variables). '<br/>'. create_component(5, $variables));
  foreach ($requested_by_users as $user) {
    $requested_by_map[$user->id()] = $user->get('field_contacts')->value;
  }

  if (isset($variables['rows']) && $webform_submission) {
    foreach ($variables['rows'] as $key => $element) {
      if (in_array($key, [
        'test_results',
        'testing_company',
        'additional_comments',
        'note_1',
        'note_2',
        'note_3',
        'note_4',
        'note_5',
        'material_1',
        'material_2',
        'material_3',
        'material_4',
        'material_5',
        'component_2',
        'component_3',
        'component_4',
        'component_5',
        'test_failed',
        'test_report_date',
        'test_result_1',
        'test_result_2',
        'test_result_3',
        'test_result_4',
        'required_date_expiry',
        'testing_cost',
        'cost_currency',
        'invoice_date',
      ])) {
        unset($variables['rows'][$key]);
        continue;
      }

      if (in_array($key, [
        'order_date',
        'invoice_date'
      ])) {
        $variables['rows'][$key]['cells'][1]['content'] = [
          '#plain_text' => $webform_submission->getData()[$key],
        ];
      }
      if (isset($element['cells'][1]['content']['#type']) && $element['cells'][1]['content']['#type'] === 'link') {
        $variables['rows'][$key]['cells'][1]['content'] = [
          '#plain_text' => $element['cells'][1]['content']['#title'],
        ];
      }
    }

    if (isset($webform_submission->getData()['requested_by'])) {
      $requested_by = $requested_by_map[$webform_submission->getData()['requested_by']];
    }
    $email = 'info@thefinebedding.com';

    if ($requested_by) {
      $email = str_replace("\r\n", "<br />", $requested_by);
    }

    $variables['rows'] = array_merge([
      'company_name' => create_row('Company Name', 'The Fine Bedding Company OU'),
      'address' => create_row('Address', 'Laane 10, Haljala, Laane-Virmuaa, Estonia'),
      'postcode' => create_row('Postcode', '45301'),
      'phone' => create_row('Phone', '+3723295680'),
      'email' => create_row('Email', $email),
    ], $variables['rows']);
  }
}

function create_component($row_index, $variables) {
  return $row_index.'. '. $variables['rows']['component_'.$row_index]['cells'][1]['content']['#title']. ' '. $variables['rows']['note_'.$row_index]['cells'][1]['content']['#plain_text']. ' '. $variables['rows']['material_'.$row_index]['cells'][1]['content']['#title'];
}

function create_row($name, $value) {
  return [
    'cells' => [
      [
        'tag' => 'th',
        'content' => $name,
      ],
      [
        'tag' => 'td',
        'content' => [
          '#markup' => $value,
        ],
      ],
    ],
  ];
}

function wetheme_preprocess_entity_print__webform_submission(&$variables) {
  if (isset($variables['webform_submission'])) {
    $webform_submission = $variables['webform_submission'];
    $term = Term::load($webform_submission->getData()['testing_company']);
    $variables['title'] = $term->getName() . ' Labtest '. $webform_submission->getData()['order_number'];
  }
}

function _sample_request_terms() {
  return [
    'order_raised_by',
    'sample_type',
    'customer',
    'product',
    '',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function wetheme_preprocess_views_view__submissions(&$variables) {
  $query = \Drupal::request()->query->all();
  if (isset($query['page'])) {
    unset($query['page']);
  }
  foreach($variables['exposed'] as $key => $value) {
    if (isset($value['#title_display'])) {
      $variables['exposed'][$key]['#title_display'] = 'before';
    }
  }
  dump($variables['exposed']);
  $variables['exposed'] = [
    "#type" => "details",
    "#title" => t('Filters'),
    "#attributes" => ['class' => ['container-inline']],
    'exposed' => $variables['exposed'],
  ];
}
